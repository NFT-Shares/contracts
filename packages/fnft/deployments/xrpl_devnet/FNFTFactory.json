{
  "address": "0xc5CE1D5C9f4fc8e8dD807016002de90684484184",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fnft",
          "type": "address"
        }
      ],
      "name": "CollectionFNFTCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fnft",
          "type": "address"
        }
      ],
      "name": "SingleFNFTCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC721[]",
          "name": "nft",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "createCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC721",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "createSingle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xefda74bed1e898de28c4c9e37c7107af72d1c1bd184fda4529a4eee239b3ae87",
  "receipt": {
    "to": null,
    "from": "0x16b61768D1d798627302BFa4f730Ac44B322D10C",
    "contractAddress": "0xc5CE1D5C9f4fc8e8dD807016002de90684484184",
    "transactionIndex": 0,
    "gasUsed": "2852668",
    "logsBloom": "0x
    "blockHash": "0xf8c3ae64ab9da5ceab62512a450b1d41c7011729d3022fb3de476e9471ce69fc",
    "transactionHash": "0xefda74bed1e898de28c4c9e37c7107af72d1c1bd184fda4529a4eee239b3ae87",
    "logs": [],
    "blockNumber": 4674339,
    "cumulativeGasUsed": "2852668",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "6baf67e12ed75f60db05fc5da7225086",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fnft\",\"type\":\"address\"}],\"name\":\"CollectionFNFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fnft\",\"type\":\"address\"}],\"name\":\"SingleFNFTCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC721[]\",\"name\":\"nft\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"createSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fnft/FNFTFactory.sol\":\"FNFTFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/fnft/FNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./collection/FNFTCollection.sol\\\";\\nimport \\\"./single/FNFT.sol\\\";\\n\\ncontract FNFTFactory {\\n\\n  function createSingle(ERC721 token, uint256 tokenId, string memory name, string memory symbol, uint256 totalSupply) public {\\n    ERC20 fnft = new FNFT(\\n      token,\\n      tokenId,\\n      name,\\n      symbol,\\n      msg.sender,\\n      totalSupply\\n    );\\n    emit CollectionFNFTCreated(address(fnft));\\n  }\\n\\n  function createCollection(string memory name, string memory symbol, uint256 totalSupply, ERC721[] memory nft, uint256[] memory ids) public {\\n    FNFTCollection fnft = new FNFTCollection(\\n      name,\\n      symbol,\\n      msg.sender,\\n      totalSupply,\\n      nft,\\n      ids\\n    );\\n    emit SingleFNFTCreated(address(fnft));\\n  }\\n\\n  event SingleFNFTCreated(address fnft);\\n  event CollectionFNFTCreated(address fnft);\\n}\",\"keccak256\":\"0x14bc4a7b5a8be7781e6886f8a9383dbe8d0c9a383f49010ad01d005c325e3a61\",\"license\":\"MIT\"},\"contracts/fnft/collection/FNFTCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport './Votable.sol';\\n\\ncontract FNFTCollection is ERC20, Votable {\\n  ERC721[] public nfts;\\n  mapping(ERC721 => uint256[]) tokenIds;\\n  address public minter;\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    address _minter,\\n    uint256 totalSupply,\\n    ERC721[] memory _nfts,\\n    uint256[] memory _tokenIds\\n  ) ERC20(name, symbol) {\\n    minter = _minter;\\n    require(_nfts.length == _tokenIds.length, \\\"FNFTCollection: nfts and tokenIds length mismatch\\\");\\n    for(uint i = 0; i < _nfts.length; i++) {\\n      _nfts[i].transferFrom(_minter, address(this), _tokenIds[i]);\\n    }\\n    _mint(_minter, totalSupply);\\n  }\\n\\n  function tryMint(ERC721 nft, uint256 tokenId, uint256 mintAmount) public {\\n      nft.transferFrom(msg.sender, address(this), tokenId);\\n      uint256 subjectId = addSubject(nft, tokenId, SubjectAction.MINT, minter, mintAmount);\\n      emit MintRequested(subjectId, nft, tokenId, msg.sender, mintAmount);\\n  }\\n\\n  function executeMint(ERC721 nft, uint256 tokenId) public {\\n    VoteSubject memory subject = resolveSubject(nft, tokenId);\\n    _mint(subject.requester, subject.fractionAmount);\\n  }\\n\\n  function tryRedeem(ERC721 nft, uint256 tokenId, uint256 payAmount) public {\\n    transferFrom(msg.sender, address(this), payAmount);\\n    uint256 subjectId = addSubject(nft, tokenId, SubjectAction.REDEEM, minter, payAmount);\\n    emit RedeemRequested(subjectId, nft, tokenId, msg.sender, payAmount);\\n  }\\n\\n  function executeRedeem(ERC721 nft, uint256 tokenId) public {\\n    VoteSubject memory subject = resolveSubject(nft, tokenId);\\n    _burn(address(this), subject.fractionAmount);\\n    nft.transferFrom(address(this), msg.sender, tokenId);\\n  }\\n}\",\"keccak256\":\"0xd9af952d51e75cbef8bff005dd31c4fb2f98e46996a224c8f6ac3a7efa24e78e\",\"license\":\"MIT\"},\"contracts/fnft/collection/Votable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nabstract contract Votable is ERC20 {\\n  uint256 public subjectIdIndex;\\n  mapping(address => mapping(uint256 => VotingState)) votingState;\\n  mapping(ERC721 => mapping(uint256 => uint256)) subjectIds;\\n  uint256[] progressSubjectIds;\\n  mapping(uint256 => VoteSubject) subjects;\\n\\n  function getLockedAmount(address voter) public view returns (uint256) {\\n    uint256 totalAmount = 0;\\n    for(uint256 i = 0; i < progressSubjectIds.length; i++) {\\n      VotingState memory state = votingState[voter][progressSubjectIds[i]];\\n      if(state.amount == 0) {\\n        continue;\\n      }\\n      totalAmount += state.amount;\\n    }\\n    return totalAmount;\\n  }\\n  \\n  function vote(ERC721 nft, uint256 tokenId, bool isYes, uint256 votingAmount) public {\\n    uint256 balance = balanceOf(msg.sender);\\n    uint256 subjectId = subjectIds[nft][tokenId];\\n    VoteSubject storage subject = subjects[subjectId];\\n    uint256 alreadyVotedAmount = votingState[msg.sender][subjectId].amount;\\n    uint256 lockedAmount = getLockedAmount(msg.sender);\\n    uint256 maxVotableAmount = balance + lockedAmount;\\n\\n    require(!subject.isEnded, \\\"Subject is ended\\\");\\n    require((alreadyVotedAmount + votingAmount) <= maxVotableAmount, \\\"Not enough balance\\\");\\n    uint256 afterAmount = votingState[msg.sender][subjectId].amount + votingAmount;\\n    votingState[msg.sender][subjectId].amount = afterAmount;\\n    \\n    emit Voted(subjectId, msg.sender, isYes, votingAmount, address(subject.nft), subject.tokenId, subject.action, subject.requester, subject.fractionAmount, subject.yesVoted, subject.noVoted, afterAmount);\\n  }\\n\\n  function removeSubjectId(uint256 id) internal {\\n    bool removed = false;\\n    for (uint i = 0; i < progressSubjectIds.length; i++){\\n      if(progressSubjectIds[i] == id) {\\n        removed = true;\\n        delete progressSubjectIds[i];\\n      } else if(removed) {\\n        progressSubjectIds[i - 1] = progressSubjectIds[i];\\n      }\\n    }\\n    progressSubjectIds.pop();\\n  }\\n\\n  function createSubjectId() internal returns (uint256){\\n      uint256 subjectId = ++subjectIdIndex;\\n      progressSubjectIds.push(subjectId);\\n      return subjectId;\\n  }\\n\\n  function addSubject(ERC721 nft,\\n      uint256 tokenId,\\n      SubjectAction action,\\n      address minter,\\n      uint256 mintAmount) internal returns (uint256){\\n\\n      uint256 subjectId = createSubjectId();\\n      subjectIds[nft][tokenId] = subjectId;\\n      subjects[subjectId].nft = nft;\\n      subjects[subjectId].tokenId = tokenId;\\n      subjects[subjectId].action = action;\\n      subjects[subjectId].requester = minter;\\n      subjects[subjectId].fractionAmount = mintAmount;\\n      return subjectId;\\n  }\\n\\n  function resolveSubject(ERC721 nft, uint256 tokenId) internal returns (VoteSubject memory){\\n    uint256 subjectId = subjectIds[nft][tokenId];\\n    VoteSubject storage subject = subjects[subjectId];\\n    require(subject.yesVoted >= (totalSupply() / 2), \\\"Not enough votes\\\");\\n    subject.isEnded = true;\\n    removeSubjectId(subjectId);\\n    return subject;\\n  }\\n\\n  event MintRequested(\\n    uint256 subjectId,\\n    ERC721 nft,\\n    uint256 tokenId, \\n    address minter,\\n    uint256 mintAmount\\n  );\\n\\n  event RedeemRequested(\\n    uint256 subjectId,\\n    ERC721 nft,\\n    uint256 tokenId, \\n    address minter,\\n    uint256 mintAmount\\n  );\\n\\n  event Voted(\\n    uint256 subjectId,\\n    address voter,\\n    bool isYes,\\n    uint256 amount,\\n    address nft,\\n    uint256 tokenId, \\n    SubjectAction action,\\n    address minter,\\n    uint256 mintAmount,\\n    uint256 yesVoted,\\n    uint256 noVoted,\\n    uint256 totalVotedOfVoter);\\n}\\n\\nstruct VotingState {\\n  uint256 amount;\\n}\\n\\nstruct VoteSubject {\\n  ERC721 nft;\\n  uint256 tokenId;\\n  SubjectAction action;\\n  address requester;\\n  uint256 fractionAmount;\\n  uint256 yesVoted;\\n  uint256 noVoted;\\n  bool isEnded;\\n}\\n\\nenum SubjectAction {\\n    MINT,\\n    REDEEM\\n}\\n\",\"keccak256\":\"0x43dccb6be9671a4347117158db9839629bb3e4223e5f1a3b7a12407c791255c1\",\"license\":\"MIT\"},\"contracts/fnft/single/FNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract FNFT is ERC20 {\\n  ERC721 public nft;\\n  uint256 public tokenId;\\n  address public minter;\\n\\n  constructor(\\n    ERC721 _nft,\\n    uint256 _tokenId,\\n    string memory name,\\n    string memory symbol,\\n    address _minter,\\n    uint256 totalSupply\\n  ) ERC20(name, symbol) public {\\n    nft = _nft;\\n    tokenId = _tokenId;\\n    minter = _minter;\\n    nft.transferFrom(_minter, address(this), _tokenId);\\n    _mint(_minter, totalSupply);\\n  }\\n\\n  function redeem() public {\\n    require(balanceOf(msg.sender) == totalSupply(), \\\"Not enough balance\\\");\\n    _burn(msg.sender, totalSupply());\\n    nft.transferFrom(address(this), msg.sender, tokenId);\\n  }\\n\\n}\",\"keccak256\":\"0xbf482f8e11772bd82f6c19b0008de4e677982441cf560ace7ff0d84d545e6373\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506132b4806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c8063120be680146200003f578063c0ebf3fd1462000058575b600080fd5b620000566200005036600462000312565b6200006f565b005b620000566200006936600462000437565b620000fc565b600085853386868660405162000085906200017e565b620000969695949392919062000553565b604051809103906000f080158015620000b3573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f1f6a83eaafd0e8aaba4e00136e1bb73b68326e521b4ff9e2facde498b2f51fe0906020015b60405180910390a1505050505050565b600085858585338660405162000112906200018c565b6200012396959493929190620005f4565b604051809103906000f08015801562000140573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f082cc60837ccddf28ff1b1a9adddcf0c1284ed3b468fae23367b30ece58c080b90602001620000ec565b611cb3806200064a83390190565b610f8280620022fd83390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620001dc57620001dc6200019a565b604052919050565b600082601f830112620001f657600080fd5b813567ffffffffffffffff8111156200021357620002136200019a565b62000228601f8201601f1916602001620001b0565b8181528460208386010111156200023e57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156200027857620002786200019a565b5060051b60200190565b80356001600160a01b03811681146200029a57600080fd5b919050565b600082601f830112620002b157600080fd5b81356020620002ca620002c4836200025b565b620001b0565b82815260059290921b84018101918181019086841115620002ea57600080fd5b8286015b84811015620003075780358352918301918301620002ee565b509695505050505050565b600080600080600060a086880312156200032b57600080fd5b853567ffffffffffffffff808211156200034457600080fd5b6200035289838a01620001e4565b96506020915081880135818111156200036a57600080fd5b620003788a828b01620001e4565b965050604088013594506060880135818111156200039557600080fd5b8801601f81018a13620003a757600080fd5b8035620003b8620002c4826200025b565b81815260059190911b8201840190848101908c831115620003d857600080fd5b928501925b828410156200040157620003f18462000282565b82529285019290850190620003dd565b965050505060808801359150808211156200041b57600080fd5b506200042a888289016200029f565b9150509295509295909350565b600080600080600060a086880312156200045057600080fd5b6200045b8662000282565b945060208601359350604086013567ffffffffffffffff808211156200048057600080fd5b6200048e89838a01620001e4565b94506060880135915080821115620004a557600080fd5b50620004b488828901620001e4565b95989497509295608001359392505050565b6000815180845260005b81811015620004ee57602081850181015186830182015201620004d0565b8181111562000501576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b8381101562000548578151875295820195908201906001016200052a565b509495945050505050565b60c0815260006200056860c0830189620004c6565b6020838203818501526200057d828a620004c6565b6001600160a01b03898116604087015260608601899052858203608087015287518083528389019450909183019060005b81811015620005ce578551841683529484019491840191600101620005ae565b505085810360a0870152620005e4818862000516565b9c9b505050505050505050505050565b600060018060a01b03808916835287602084015260c060408401526200061e60c0840188620004c6565b8381036060850152620006328188620004c6565b959091166080840152505060a0015294935050505056fe60806040523480156200001157600080fd5b5060405162001cb338038062001cb383398101604081905262000034916200055c565b8551869086906200004d906003906020850190620002a7565b50805162000063906004906020840190620002a7565b5050600c80546001600160a01b0319166001600160a01b038716179055508051825114620000f25760405162461bcd60e51b815260206004820152603160248201527f464e4654436f6c6c656374696f6e3a206e66747320616e6420746f6b656e49646044820152700e640d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084015b60405180910390fd5b60005b8251811015620001cb5782818151811062000114576200011462000630565b60200260200101516001600160a01b03166323b872dd863085858151811062000141576200014162000630565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156200019c57600080fd5b505af1158015620001b1573d6000803e3d6000fd5b505050508080620001c2906200065c565b915050620000f5565b50620001d88484620001e4565b505050505050620006d2565b6001600160a01b0382166200023c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620000e9565b80600260008282546200025091906200067a565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b828054620002b59062000695565b90600052602060002090601f016020900481019282620002d9576000855562000324565b82601f10620002f457805160ff191683800117855562000324565b8280016001018555821562000324579182015b828111156200032457825182559160200191906001019062000307565b506200033292915062000336565b5090565b5b8082111562000332576000815560010162000337565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200038e576200038e6200034d565b604052919050565b600082601f830112620003a857600080fd5b81516001600160401b03811115620003c457620003c46200034d565b6020620003da601f8301601f1916820162000363565b8281528582848701011115620003ef57600080fd5b60005b838110156200040f578581018301518282018401528201620003f2565b83811115620004215760008385840101525b5095945050505050565b6001600160a01b03811681146200044157600080fd5b50565b805162000451816200042b565b919050565b60006001600160401b038211156200047257620004726200034d565b5060051b60200190565b600082601f8301126200048e57600080fd5b81516020620004a7620004a18362000456565b62000363565b82815260059290921b84018101918181019086841115620004c757600080fd5b8286015b84811015620004ef578051620004e1816200042b565b8352918301918301620004cb565b509695505050505050565b600082601f8301126200050c57600080fd5b815160206200051f620004a18362000456565b82815260059290921b840181019181810190868411156200053f57600080fd5b8286015b84811015620004ef578051835291830191830162000543565b60008060008060008060c087890312156200057657600080fd5b86516001600160401b03808211156200058e57600080fd5b6200059c8a838b0162000396565b97506020890151915080821115620005b357600080fd5b620005c18a838b0162000396565b9650620005d160408a0162000444565b9550606089015194506080890151915080821115620005ef57600080fd5b620005fd8a838b016200047c565b935060a08901519150808211156200061457600080fd5b506200062389828a01620004fa565b9150509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141562000673576200067362000646565b5060010190565b6000821982111562000690576200069062000646565b500190565b600181811c90821680620006aa57607f821691505b60208210811415620006cc57634e487b7160e01b600052602260045260246000fd5b50919050565b6115d180620006e26000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806377b62680116100ad578063a9059cbb11610071578063a9059cbb1461027f578063b210797114610292578063bfa5f3cd146102a5578063dd62ed3e146102b8578063e4048315146102cb57600080fd5b806377b62680146102355780637943fc801461023e578063929ec5371461025157806395d89b4114610264578063a457c2d71461026c57600080fd5b8063265aa621116100f4578063265aa621146101c2578063313ce567146101d557806336b79ae0146101e457806339509351146101f957806370a082311461020c57600080fd5b806306fdde0314610131578063075461721461014f578063095ea7b31461017a57806318160ddd1461019d57806323b872dd146101af575b600080fd5b6101396102de565b604051610146919061122f565b60405180910390f35b600c54610162906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b61018d61018836600461129c565b610370565b6040519015158152602001610146565b6002545b604051908152602001610146565b61018d6101bd3660046112c8565b610388565b6101626101d0366004611309565b6103ac565b60405160128152602001610146565b6101f76101f2366004611322565b6103d6565b005b61018d61020736600461129c565b6105eb565b6101a161021a36600461136f565b6001600160a01b031660009081526020819052604090205490565b6101a160055481565b6101f761024c366004611393565b61060d565b6101a161025f36600461136f565b610699565b610139610737565b61018d61027a36600461129c565b610746565b61018d61028d36600461129c565b6107c1565b6101f76102a036600461129c565b6107cf565b6101f76102b336600461129c565b6107f4565b6101a16102c63660046113c8565b61087b565b6101f76102d9366004611393565b6108a6565b6060600380546102ed90611401565b80601f016020809104026020016040519081016040528092919081815260200182805461031990611401565b80156103665780601f1061033b57610100808354040283529160200191610366565b820191906000526020600020905b81548152906001019060200180831161034957829003601f168201915b5050505050905090565b60003361037e818585610981565b5060019392505050565b600033610396858285610aa5565b6103a1858585610b1f565b506001949350505050565b600a81815481106103bc57600080fd5b6000918252602090912001546001600160a01b0316905081565b33600081815260208181526040808320546001600160a01b03891684526007835281842088855283528184205480855260098452828520868652600685528386208287529094529184205490949193909161043090610699565b9050600061043e8287611452565b600685015490915060ff161561048e5760405162461bcd60e51b815260206004820152601060248201526f14dd589a9958dd081a5cc8195b99195960821b60448201526064015b60405180910390fd5b806104998885611452565b11156104dc5760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b6044820152606401610485565b336000908152600660209081526040808320888452909152812054610502908990611452565b90508060066000336001600160a01b03166001600160a01b031681526020019081526020016000206000888152602001908152602001600020600001819055507fbd6f08c342216ecaddd78dc5d11e78ff871171d9b6348a61ff341cac2501f35e86338b8b8960000160009054906101000a90046001600160a01b03168a600101548b60020160009054906101000a900460ff168c60020160019054906101000a90046001600160a01b03168d600301548e600401548f600501548c6040516105d69c9b9a99989796959493929190611480565b60405180910390a15050505050505050505050565b60003361037e8185856105fe838361087b565b6106089190611452565b610981565b610618333083610388565b50600c5460009061063990859085906001906001600160a01b031686610cc3565b604080518281526001600160a01b0387166020820152908101859052336060820152608081018490529091507f9c8f0d171d0fcedb83a0185c399385e38bfc9c026379717c1b8bd580082331789060a0015b60405180910390a150505050565b600080805b600854811015610730576001600160a01b038416600090815260066020526040812060088054839190859081106106d7576106d761151b565b60009182526020808320909101548352828101939093526040918201902081519283019091525480825290915061070e575061071e565b805161071a9084611452565b9250505b8061072881611531565b91505061069e565b5092915050565b6060600480546102ed90611401565b60003381610754828661087b565b9050838110156107b45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610485565b6103a18286868403610981565b60003361037e818585610b1f565b60006107db8383610d85565b90506107ef81606001518260800151610f04565b505050565b60006108008383610d85565b9050610810308260800151610fc3565b6040516323b872dd60e01b8152306004820152336024820152604481018390526001600160a01b038416906323b872dd90606401600060405180830381600087803b15801561085e57600080fd5b505af1158015610872573d6000803e3d6000fd5b50505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038416906323b872dd90606401600060405180830381600087803b1580156108f457600080fd5b505af1158015610908573d6000803e3d6000fd5b5050600c546000925061092b91508590859084906001600160a01b031686610cc3565b604080518281526001600160a01b0387166020820152908101859052336060820152608081018490529091507fc6ef70d851c242e5c6ac08c0b0a4de649c51d5c641e63f62754d21bba601c02f9060a00161068b565b6001600160a01b0383166109e35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610485565b6001600160a01b038216610a445760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610485565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610ab1848461087b565b90506000198114610b195781811015610b0c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610485565b610b198484848403610981565b50505050565b6001600160a01b038316610b835760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610485565b6001600160a01b038216610be55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610485565b6001600160a01b03831660009081526020819052604090205481811015610c5d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610485565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610b19565b600080610cce6110f5565b6001600160a01b03881660008181526007602090815260408083208b845282528083208590558483526009909152902080546001600160a01b03191690911781556001808201899055600290910180549293508792909160ff19909116908381811115610d3d57610d3d61146a565b021790555060008181526009602052604090206002810180546001600160a01b03871661010002610100600160a81b0319909116179055600301839055905095945050505050565b604080516101008101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905260e083018290526001600160a01b038616825260078152838220858352815283822054808352600990915292902060028054929392610dfe919061154c565b81600401541015610e445760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f75676820766f74657360801b6044820152606401610485565b60068101805460ff19166001179055610e5c82611147565b604080516101008101825282546001600160a01b0316815260018084015460208301526002840154919284929084019160ff90911690811115610ea157610ea161146a565b6001811115610eb257610eb261146a565b8152600282015461010090046001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460ff16151560a09091015295945050505050565b6001600160a01b038216610f5a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610485565b8060026000828254610f6c9190611452565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166110235760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610485565b6001600160a01b038216600090815260208190526040902054818110156110975760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610485565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b60008060056000815461110790611531565b9182905550600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30181905592915050565b6000805b6008548110156112035782600882815481106111695761116961151b565b906000526020600020015414156111a15760019150600881815481106111915761119161151b565b60009182526020822001556111f1565b81156111f157600881815481106111ba576111ba61151b565b906000526020600020015460086001836111d4919061156e565b815481106111e4576111e461151b565b6000918252602090912001555b806111fb81611531565b91505061114b565b50600880548061121557611215611585565b600190038181906000526020600020016000905590555050565b600060208083528351808285015260005b8181101561125c57858101830151858201604001528201611240565b8181111561126e576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461129957600080fd5b50565b600080604083850312156112af57600080fd5b82356112ba81611284565b946020939093013593505050565b6000806000606084860312156112dd57600080fd5b83356112e881611284565b925060208401356112f881611284565b929592945050506040919091013590565b60006020828403121561131b57600080fd5b5035919050565b6000806000806080858703121561133857600080fd5b843561134381611284565b9350602085013592506040850135801515811461135f57600080fd5b9396929550929360600135925050565b60006020828403121561138157600080fd5b813561138c81611284565b9392505050565b6000806000606084860312156113a857600080fd5b83356113b381611284565b95602085013595506040909401359392505050565b600080604083850312156113db57600080fd5b82356113e681611284565b915060208301356113f681611284565b809150509250929050565b600181811c9082168061141557607f821691505b6020821081141561143657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156114655761146561143c565b500190565b634e487b7160e01b600052602160045260246000fd5b8c81526001600160a01b038c811660208301528b15156040830152606082018b90528916608082015260a081018890526101808101600288106114d357634e487b7160e01b600052602160045260246000fd5b8760c08301526114ee60e08301886001600160a01b03169052565b856101008301528461012083015283610140830152826101608301529d9c50505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156115455761154561143c565b5060010190565b60008261156957634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156115805761158061143c565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212207a01739f69de66dab67206d38912d04f5e725757061606ee5ebfd9941662db1264736f6c634300080c003360806040523480156200001157600080fd5b5060405162000f8238038062000f8283398101604081905262000034916200036c565b8351849084906200004d906003906020850190620001e0565b50805162000063906004906020840190620001e0565b5050600580546001600160a01b03199081166001600160a01b038a81169182179093556006899055600780549092169286169283179091556040516323b872dd60e01b815260048101929092523060248301526044820188905291506323b872dd90606401600060405180830381600087803b158015620000e357600080fd5b505af1158015620000f8573d6000803e3d6000fd5b505050506200010e82826200011a60201b60201c565b50505050505062000478565b6001600160a01b038216620001755760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b806002600082825462000189919062000414565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b828054620001ee906200043b565b90600052602060002090601f0160209004810192826200021257600085556200025d565b82601f106200022d57805160ff19168380011785556200025d565b828001600101855582156200025d579182015b828111156200025d57825182559160200191906001019062000240565b506200026b9291506200026f565b5090565b5b808211156200026b576000815560010162000270565b6001600160a01b03811681146200029c57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002c757600080fd5b81516001600160401b0380821115620002e457620002e46200029f565b604051601f8301601f19908116603f011681019082821181831017156200030f576200030f6200029f565b816040528381526020925086838588010111156200032c57600080fd5b600091505b8382101562000350578582018301518183018401529082019062000331565b83821115620003625760008385830101525b9695505050505050565b60008060008060008060c087890312156200038657600080fd5b8651620003938162000286565b6020880151604089015191975095506001600160401b0380821115620003b857600080fd5b620003c68a838b01620002b5565b95506060890151915080821115620003dd57600080fd5b50620003ec89828a01620002b5565b9350506080870151620003ff8162000286565b8092505060a087015190509295509295509295565b600082198211156200043657634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200045057607f821691505b602082108114156200047257634e487b7160e01b600052602260045260246000fd5b50919050565b610afa80620004886000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80633950935111610097578063a457c2d711610066578063a457c2d7146101fe578063a9059cbb14610211578063be040fb014610224578063dd62ed3e1461022e57600080fd5b806339509351146101a757806347ccca02146101ba57806370a08231146101cd57806395d89b41146101f657600080fd5b806317d70f7c116100d357806317d70f7c1461016657806318160ddd1461017d57806323b872dd14610185578063313ce5671461019857600080fd5b806306fdde03146100fa5780630754617214610118578063095ea7b314610143575b600080fd5b610102610241565b60405161010f9190610937565b60405180910390f35b60075461012b906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b6101566101513660046109a8565b6102d3565b604051901515815260200161010f565b61016f60065481565b60405190815260200161010f565b60025461016f565b6101566101933660046109d2565b6102eb565b6040516012815260200161010f565b6101566101b53660046109a8565b61030f565b60055461012b906001600160a01b031681565b61016f6101db366004610a0e565b6001600160a01b031660009081526020819052604090205490565b610102610331565b61015661020c3660046109a8565b610340565b61015661021f3660046109a8565b6103c0565b61022c6103ce565b005b61016f61023c366004610a30565b6104a5565b60606003805461025090610a63565b80601f016020809104026020016040519081016040528092919081815260200182805461027c90610a63565b80156102c95780601f1061029e576101008083540402835291602001916102c9565b820191906000526020600020905b8154815290600101906020018083116102ac57829003601f168201915b5050505050905090565b6000336102e18185856104d0565b5060019392505050565b6000336102f98582856105f5565b610304858585610669565b506001949350505050565b6000336102e181858561032283836104a5565b61032c9190610a9e565b6104d0565b60606004805461025090610a63565b6000338161034e82866104a5565b9050838110156103b35760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61030482868684036104d0565b6000336102e1818585610669565b60025433600090815260208190526040902054146104235760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b60448201526064016103aa565b6104353361043060025490565b61080d565b6005546006546040516323b872dd60e01b815230600482015233602482015260448101919091526001600160a01b03909116906323b872dd90606401600060405180830381600087803b15801561048b57600080fd5b505af115801561049f573d6000803e3d6000fd5b50505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166105325760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103aa565b6001600160a01b0382166105935760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103aa565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061060184846104a5565b9050600019811461049f578181101561065c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103aa565b61049f84848484036104d0565b6001600160a01b0383166106cd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103aa565b6001600160a01b03821661072f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103aa565b6001600160a01b038316600090815260208190526040902054818110156107a75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103aa565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361049f565b6001600160a01b03821661086d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103aa565b6001600160a01b038216600090815260208190526040902054818110156108e15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103aa565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016105e8565b600060208083528351808285015260005b8181101561096457858101830151858201604001528201610948565b81811115610976576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146109a357600080fd5b919050565b600080604083850312156109bb57600080fd5b6109c48361098c565b946020939093013593505050565b6000806000606084860312156109e757600080fd5b6109f08461098c565b92506109fe6020850161098c565b9150604084013590509250925092565b600060208284031215610a2057600080fd5b610a298261098c565b9392505050565b60008060408385031215610a4357600080fd5b610a4c8361098c565b9150610a5a6020840161098c565b90509250929050565b600181811c90821680610a7757607f821691505b60208210811415610a9857634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610abf57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220acd96ad4834b5ba60397dec45942df4d6eca25dd6d67807a3b9f31891f54ebe164736f6c634300080c0033a26469706673582212209df00d67cd00c21282b5eb6b8b9cb952a5ee00b8fa9fc1937b721ad7dfb655a164736f6c634300080c0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200003a5760003560e01c8063120be680146200003f578063c0ebf3fd1462000058575b600080fd5b620000566200005036600462000312565b6200006f565b005b620000566200006936600462000437565b620000fc565b600085853386868660405162000085906200017e565b620000969695949392919062000553565b604051809103906000f080158015620000b3573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f1f6a83eaafd0e8aaba4e00136e1bb73b68326e521b4ff9e2facde498b2f51fe0906020015b60405180910390a1505050505050565b600085858585338660405162000112906200018c565b6200012396959493929190620005f4565b604051809103906000f08015801562000140573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f082cc60837ccddf28ff1b1a9adddcf0c1284ed3b468fae23367b30ece58c080b90602001620000ec565b611cb3806200064a83390190565b610f8280620022fd83390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620001dc57620001dc6200019a565b604052919050565b600082601f830112620001f657600080fd5b813567ffffffffffffffff8111156200021357620002136200019a565b62000228601f8201601f1916602001620001b0565b8181528460208386010111156200023e57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156200027857620002786200019a565b5060051b60200190565b80356001600160a01b03811681146200029a57600080fd5b919050565b600082601f830112620002b157600080fd5b81356020620002ca620002c4836200025b565b620001b0565b82815260059290921b84018101918181019086841115620002ea57600080fd5b8286015b84811015620003075780358352918301918301620002ee565b509695505050505050565b600080600080600060a086880312156200032b57600080fd5b853567ffffffffffffffff808211156200034457600080fd5b6200035289838a01620001e4565b96506020915081880135818111156200036a57600080fd5b620003788a828b01620001e4565b965050604088013594506060880135818111156200039557600080fd5b8801601f81018a13620003a757600080fd5b8035620003b8620002c4826200025b565b81815260059190911b8201840190848101908c831115620003d857600080fd5b928501925b828410156200040157620003f18462000282565b82529285019290850190620003dd565b965050505060808801359150808211156200041b57600080fd5b506200042a888289016200029f565b9150509295509295909350565b600080600080600060a086880312156200045057600080fd5b6200045b8662000282565b945060208601359350604086013567ffffffffffffffff808211156200048057600080fd5b6200048e89838a01620001e4565b94506060880135915080821115620004a557600080fd5b50620004b488828901620001e4565b95989497509295608001359392505050565b6000815180845260005b81811015620004ee57602081850181015186830182015201620004d0565b8181111562000501576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b8381101562000548578151875295820195908201906001016200052a565b509495945050505050565b60c0815260006200056860c0830189620004c6565b6020838203818501526200057d828a620004c6565b6001600160a01b03898116604087015260608601899052858203608087015287518083528389019450909183019060005b81811015620005ce578551841683529484019491840191600101620005ae565b505085810360a0870152620005e4818862000516565b9c9b505050505050505050505050565b600060018060a01b03808916835287602084015260c060408401526200061e60c0840188620004c6565b8381036060850152620006328188620004c6565b959091166080840152505060a0015294935050505056fe60806040523480156200001157600080fd5b5060405162001cb338038062001cb383398101604081905262000034916200055c565b8551869086906200004d906003906020850190620002a7565b50805162000063906004906020840190620002a7565b5050600c80546001600160a01b0319166001600160a01b038716179055508051825114620000f25760405162461bcd60e51b815260206004820152603160248201527f464e4654436f6c6c656374696f6e3a206e66747320616e6420746f6b656e49646044820152700e640d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084015b60405180910390fd5b60005b8251811015620001cb5782818151811062000114576200011462000630565b60200260200101516001600160a01b03166323b872dd863085858151811062000141576200014162000630565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156200019c57600080fd5b505af1158015620001b1573d6000803e3d6000fd5b505050508080620001c2906200065c565b915050620000f5565b50620001d88484620001e4565b505050505050620006d2565b6001600160a01b0382166200023c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620000e9565b80600260008282546200025091906200067a565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b828054620002b59062000695565b90600052602060002090601f016020900481019282620002d9576000855562000324565b82601f10620002f457805160ff191683800117855562000324565b8280016001018555821562000324579182015b828111156200032457825182559160200191906001019062000307565b506200033292915062000336565b5090565b5b8082111562000332576000815560010162000337565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200038e576200038e6200034d565b604052919050565b600082601f830112620003a857600080fd5b81516001600160401b03811115620003c457620003c46200034d565b6020620003da601f8301601f1916820162000363565b8281528582848701011115620003ef57600080fd5b60005b838110156200040f578581018301518282018401528201620003f2565b83811115620004215760008385840101525b5095945050505050565b6001600160a01b03811681146200044157600080fd5b50565b805162000451816200042b565b919050565b60006001600160401b038211156200047257620004726200034d565b5060051b60200190565b600082601f8301126200048e57600080fd5b81516020620004a7620004a18362000456565b62000363565b82815260059290921b84018101918181019086841115620004c757600080fd5b8286015b84811015620004ef578051620004e1816200042b565b8352918301918301620004cb565b509695505050505050565b600082601f8301126200050c57600080fd5b815160206200051f620004a18362000456565b82815260059290921b840181019181810190868411156200053f57600080fd5b8286015b84811015620004ef578051835291830191830162000543565b60008060008060008060c087890312156200057657600080fd5b86516001600160401b03808211156200058e57600080fd5b6200059c8a838b0162000396565b97506020890151915080821115620005b357600080fd5b620005c18a838b0162000396565b9650620005d160408a0162000444565b9550606089015194506080890151915080821115620005ef57600080fd5b620005fd8a838b016200047c565b935060a08901519150808211156200061457600080fd5b506200062389828a01620004fa565b9150509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141562000673576200067362000646565b5060010190565b6000821982111562000690576200069062000646565b500190565b600181811c90821680620006aa57607f821691505b60208210811415620006cc57634e487b7160e01b600052602260045260246000fd5b50919050565b6115d180620006e26000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806377b62680116100ad578063a9059cbb11610071578063a9059cbb1461027f578063b210797114610292578063bfa5f3cd146102a5578063dd62ed3e146102b8578063e4048315146102cb57600080fd5b806377b62680146102355780637943fc801461023e578063929ec5371461025157806395d89b4114610264578063a457c2d71461026c57600080fd5b8063265aa621116100f4578063265aa621146101c2578063313ce567146101d557806336b79ae0146101e457806339509351146101f957806370a082311461020c57600080fd5b806306fdde0314610131578063075461721461014f578063095ea7b31461017a57806318160ddd1461019d57806323b872dd146101af575b600080fd5b6101396102de565b604051610146919061122f565b60405180910390f35b600c54610162906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b61018d61018836600461129c565b610370565b6040519015158152602001610146565b6002545b604051908152602001610146565b61018d6101bd3660046112c8565b610388565b6101626101d0366004611309565b6103ac565b60405160128152602001610146565b6101f76101f2366004611322565b6103d6565b005b61018d61020736600461129c565b6105eb565b6101a161021a36600461136f565b6001600160a01b031660009081526020819052604090205490565b6101a160055481565b6101f761024c366004611393565b61060d565b6101a161025f36600461136f565b610699565b610139610737565b61018d61027a36600461129c565b610746565b61018d61028d36600461129c565b6107c1565b6101f76102a036600461129c565b6107cf565b6101f76102b336600461129c565b6107f4565b6101a16102c63660046113c8565b61087b565b6101f76102d9366004611393565b6108a6565b6060600380546102ed90611401565b80601f016020809104026020016040519081016040528092919081815260200182805461031990611401565b80156103665780601f1061033b57610100808354040283529160200191610366565b820191906000526020600020905b81548152906001019060200180831161034957829003601f168201915b5050505050905090565b60003361037e818585610981565b5060019392505050565b600033610396858285610aa5565b6103a1858585610b1f565b506001949350505050565b600a81815481106103bc57600080fd5b6000918252602090912001546001600160a01b0316905081565b33600081815260208181526040808320546001600160a01b03891684526007835281842088855283528184205480855260098452828520868652600685528386208287529094529184205490949193909161043090610699565b9050600061043e8287611452565b600685015490915060ff161561048e5760405162461bcd60e51b815260206004820152601060248201526f14dd589a9958dd081a5cc8195b99195960821b60448201526064015b60405180910390fd5b806104998885611452565b11156104dc5760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b6044820152606401610485565b336000908152600660209081526040808320888452909152812054610502908990611452565b90508060066000336001600160a01b03166001600160a01b031681526020019081526020016000206000888152602001908152602001600020600001819055507fbd6f08c342216ecaddd78dc5d11e78ff871171d9b6348a61ff341cac2501f35e86338b8b8960000160009054906101000a90046001600160a01b03168a600101548b60020160009054906101000a900460ff168c60020160019054906101000a90046001600160a01b03168d600301548e600401548f600501548c6040516105d69c9b9a99989796959493929190611480565b60405180910390a15050505050505050505050565b60003361037e8185856105fe838361087b565b6106089190611452565b610981565b610618333083610388565b50600c5460009061063990859085906001906001600160a01b031686610cc3565b604080518281526001600160a01b0387166020820152908101859052336060820152608081018490529091507f9c8f0d171d0fcedb83a0185c399385e38bfc9c026379717c1b8bd580082331789060a0015b60405180910390a150505050565b600080805b600854811015610730576001600160a01b038416600090815260066020526040812060088054839190859081106106d7576106d761151b565b60009182526020808320909101548352828101939093526040918201902081519283019091525480825290915061070e575061071e565b805161071a9084611452565b9250505b8061072881611531565b91505061069e565b5092915050565b6060600480546102ed90611401565b60003381610754828661087b565b9050838110156107b45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610485565b6103a18286868403610981565b60003361037e818585610b1f565b60006107db8383610d85565b90506107ef81606001518260800151610f04565b505050565b60006108008383610d85565b9050610810308260800151610fc3565b6040516323b872dd60e01b8152306004820152336024820152604481018390526001600160a01b038416906323b872dd90606401600060405180830381600087803b15801561085e57600080fd5b505af1158015610872573d6000803e3d6000fd5b50505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038416906323b872dd90606401600060405180830381600087803b1580156108f457600080fd5b505af1158015610908573d6000803e3d6000fd5b5050600c546000925061092b91508590859084906001600160a01b031686610cc3565b604080518281526001600160a01b0387166020820152908101859052336060820152608081018490529091507fc6ef70d851c242e5c6ac08c0b0a4de649c51d5c641e63f62754d21bba601c02f9060a00161068b565b6001600160a01b0383166109e35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610485565b6001600160a01b038216610a445760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610485565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610ab1848461087b565b90506000198114610b195781811015610b0c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610485565b610b198484848403610981565b50505050565b6001600160a01b038316610b835760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610485565b6001600160a01b038216610be55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610485565b6001600160a01b03831660009081526020819052604090205481811015610c5d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610485565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610b19565b600080610cce6110f5565b6001600160a01b03881660008181526007602090815260408083208b845282528083208590558483526009909152902080546001600160a01b03191690911781556001808201899055600290910180549293508792909160ff19909116908381811115610d3d57610d3d61146a565b021790555060008181526009602052604090206002810180546001600160a01b03871661010002610100600160a81b0319909116179055600301839055905095945050505050565b604080516101008101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905260e083018290526001600160a01b038616825260078152838220858352815283822054808352600990915292902060028054929392610dfe919061154c565b81600401541015610e445760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f75676820766f74657360801b6044820152606401610485565b60068101805460ff19166001179055610e5c82611147565b604080516101008101825282546001600160a01b0316815260018084015460208301526002840154919284929084019160ff90911690811115610ea157610ea161146a565b6001811115610eb257610eb261146a565b8152600282015461010090046001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460ff16151560a09091015295945050505050565b6001600160a01b038216610f5a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610485565b8060026000828254610f6c9190611452565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166110235760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610485565b6001600160a01b038216600090815260208190526040902054818110156110975760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610485565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b60008060056000815461110790611531565b9182905550600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30181905592915050565b6000805b6008548110156112035782600882815481106111695761116961151b565b906000526020600020015414156111a15760019150600881815481106111915761119161151b565b60009182526020822001556111f1565b81156111f157600881815481106111ba576111ba61151b565b906000526020600020015460086001836111d4919061156e565b815481106111e4576111e461151b565b6000918252602090912001555b806111fb81611531565b91505061114b565b50600880548061121557611215611585565b600190038181906000526020600020016000905590555050565b600060208083528351808285015260005b8181101561125c57858101830151858201604001528201611240565b8181111561126e576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461129957600080fd5b50565b600080604083850312156112af57600080fd5b82356112ba81611284565b946020939093013593505050565b6000806000606084860312156112dd57600080fd5b83356112e881611284565b925060208401356112f881611284565b929592945050506040919091013590565b60006020828403121561131b57600080fd5b5035919050565b6000806000806080858703121561133857600080fd5b843561134381611284565b9350602085013592506040850135801515811461135f57600080fd5b9396929550929360600135925050565b60006020828403121561138157600080fd5b813561138c81611284565b9392505050565b6000806000606084860312156113a857600080fd5b83356113b381611284565b95602085013595506040909401359392505050565b600080604083850312156113db57600080fd5b82356113e681611284565b915060208301356113f681611284565b809150509250929050565b600181811c9082168061141557607f821691505b6020821081141561143657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156114655761146561143c565b500190565b634e487b7160e01b600052602160045260246000fd5b8c81526001600160a01b038c811660208301528b15156040830152606082018b90528916608082015260a081018890526101808101600288106114d357634e487b7160e01b600052602160045260246000fd5b8760c08301526114ee60e08301886001600160a01b03169052565b856101008301528461012083015283610140830152826101608301529d9c50505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156115455761154561143c565b5060010190565b60008261156957634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156115805761158061143c565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212207a01739f69de66dab67206d38912d04f5e725757061606ee5ebfd9941662db1264736f6c634300080c003360806040523480156200001157600080fd5b5060405162000f8238038062000f8283398101604081905262000034916200036c565b8351849084906200004d906003906020850190620001e0565b50805162000063906004906020840190620001e0565b5050600580546001600160a01b03199081166001600160a01b038a81169182179093556006899055600780549092169286169283179091556040516323b872dd60e01b815260048101929092523060248301526044820188905291506323b872dd90606401600060405180830381600087803b158015620000e357600080fd5b505af1158015620000f8573d6000803e3d6000fd5b505050506200010e82826200011a60201b60201c565b50505050505062000478565b6001600160a01b038216620001755760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b806002600082825462000189919062000414565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b828054620001ee906200043b565b90600052602060002090601f0160209004810192826200021257600085556200025d565b82601f106200022d57805160ff19168380011785556200025d565b828001600101855582156200025d579182015b828111156200025d57825182559160200191906001019062000240565b506200026b9291506200026f565b5090565b5b808211156200026b576000815560010162000270565b6001600160a01b03811681146200029c57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002c757600080fd5b81516001600160401b0380821115620002e457620002e46200029f565b604051601f8301601f19908116603f011681019082821181831017156200030f576200030f6200029f565b816040528381526020925086838588010111156200032c57600080fd5b600091505b8382101562000350578582018301518183018401529082019062000331565b83821115620003625760008385830101525b9695505050505050565b60008060008060008060c087890312156200038657600080fd5b8651620003938162000286565b6020880151604089015191975095506001600160401b0380821115620003b857600080fd5b620003c68a838b01620002b5565b95506060890151915080821115620003dd57600080fd5b50620003ec89828a01620002b5565b9350506080870151620003ff8162000286565b8092505060a087015190509295509295509295565b600082198211156200043657634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200045057607f821691505b602082108114156200047257634e487b7160e01b600052602260045260246000fd5b50919050565b610afa80620004886000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80633950935111610097578063a457c2d711610066578063a457c2d7146101fe578063a9059cbb14610211578063be040fb014610224578063dd62ed3e1461022e57600080fd5b806339509351146101a757806347ccca02146101ba57806370a08231146101cd57806395d89b41146101f657600080fd5b806317d70f7c116100d357806317d70f7c1461016657806318160ddd1461017d57806323b872dd14610185578063313ce5671461019857600080fd5b806306fdde03146100fa5780630754617214610118578063095ea7b314610143575b600080fd5b610102610241565b60405161010f9190610937565b60405180910390f35b60075461012b906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b6101566101513660046109a8565b6102d3565b604051901515815260200161010f565b61016f60065481565b60405190815260200161010f565b60025461016f565b6101566101933660046109d2565b6102eb565b6040516012815260200161010f565b6101566101b53660046109a8565b61030f565b60055461012b906001600160a01b031681565b61016f6101db366004610a0e565b6001600160a01b031660009081526020819052604090205490565b610102610331565b61015661020c3660046109a8565b610340565b61015661021f3660046109a8565b6103c0565b61022c6103ce565b005b61016f61023c366004610a30565b6104a5565b60606003805461025090610a63565b80601f016020809104026020016040519081016040528092919081815260200182805461027c90610a63565b80156102c95780601f1061029e576101008083540402835291602001916102c9565b820191906000526020600020905b8154815290600101906020018083116102ac57829003601f168201915b5050505050905090565b6000336102e18185856104d0565b5060019392505050565b6000336102f98582856105f5565b610304858585610669565b506001949350505050565b6000336102e181858561032283836104a5565b61032c9190610a9e565b6104d0565b60606004805461025090610a63565b6000338161034e82866104a5565b9050838110156103b35760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61030482868684036104d0565b6000336102e1818585610669565b60025433600090815260208190526040902054146104235760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b60448201526064016103aa565b6104353361043060025490565b61080d565b6005546006546040516323b872dd60e01b815230600482015233602482015260448101919091526001600160a01b03909116906323b872dd90606401600060405180830381600087803b15801561048b57600080fd5b505af115801561049f573d6000803e3d6000fd5b50505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166105325760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103aa565b6001600160a01b0382166105935760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103aa565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061060184846104a5565b9050600019811461049f578181101561065c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103aa565b61049f84848484036104d0565b6001600160a01b0383166106cd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103aa565b6001600160a01b03821661072f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103aa565b6001600160a01b038316600090815260208190526040902054818110156107a75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103aa565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361049f565b6001600160a01b03821661086d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103aa565b6001600160a01b038216600090815260208190526040902054818110156108e15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103aa565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016105e8565b600060208083528351808285015260005b8181101561096457858101830151858201604001528201610948565b81811115610976576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146109a357600080fd5b919050565b600080604083850312156109bb57600080fd5b6109c48361098c565b946020939093013593505050565b6000806000606084860312156109e757600080fd5b6109f08461098c565b92506109fe6020850161098c565b9150604084013590509250925092565b600060208284031215610a2057600080fd5b610a298261098c565b9392505050565b60008060408385031215610a4357600080fd5b610a4c8361098c565b9150610a5a6020840161098c565b90509250929050565b600181811c90821680610a7757607f821691505b60208210811415610a9857634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610abf57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220acd96ad4834b5ba60397dec45942df4d6eca25dd6d67807a3b9f31891f54ebe164736f6c634300080c0033a26469706673582212209df00d67cd00c21282b5eb6b8b9cb952a5ee00b8fa9fc1937b721ad7dfb655a164736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}